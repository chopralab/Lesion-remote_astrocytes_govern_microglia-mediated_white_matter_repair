library(tidyverse)
library(factoextra)
library(grid)
library(ggsignif)
library(stringr)
library(reshape2)
library(gtools)
library(tidyr)
library(ggbeeswarm) #https://github.com/eclarke/ggbeeswarm
library(ggrepel)
library(scales)
library(ggplot2)
#library(ggExtra) #https://cran.r-project.org/web/packages/ggExtra/vignettes/ggExtra.html
library(cowplot)
library(ggridges)
# install.packages("ggforce")
library(ggforce)
getwd()
file_list = list.files(path="results", pattern=NULL, all.files=FALSE,
full.names=FALSE)
df <- excel_file
plot_combined_values_Stacked_with_blank <- function(df, Title1, Title2) {
lipid_classes <- c("CAR", "CE", "Cer", "FA", "PC", "PE", "PG", "PI", "PS", "SM", "TAG",'DAG','TAG | DAG','DAG | CE','TAG | DAG | CE')
lipid_colors <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#808080", "#cab2d6", "#6a3d9a",'#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3')
lipid_colors_alpha <- alpha(lipid_colors, 0.5)
# Create a named vector to map lipid classes to their colors
lipid_class_colors <- setNames(lipid_colors_alpha, lipid_classes)
# df -> excel_file
# df -> excel_file
# Extract column lengths
len1 <- as.numeric(df$Length1[1])
len2 <- as.numeric(df$Length2[1])
# Columns after 'type' are the ones of interest
all_cols <- colnames(df)
start_idx <- which(all_cols == "type") + 1
cols1 <- all_cols[start_idx:(start_idx + len1 - 1)]
cols2 <- all_cols[(start_idx + len1):(start_idx + len1 + len2 - 1)]
# Get the blank column (which is the penultimate column)
blank_col <- all_cols[length(all_cols)]
# Subtract the blank column from the columns of interest and set negative values to 0
df[cols1] <- pmax(df[cols1] - df[[blank_col]], 0)
df[cols2] <- pmax(df[cols2] - df[[blank_col]], 0)
df[cols1] <- apply(df[cols1], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
df[cols2] <- apply(df[cols2], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
# Compute the means for the groups of columns
df <- df %>%
mutate(mean1 = rowMeans(select(., one_of(cols1))),
mean2 = rowMeans(select(., one_of(cols2))))
# Selecting the required columns
new_df <- df %>%
select(lipid, type, mean1, mean2)
# Construct the file name using the Title1 and Title2 variables
file_name2 <- paste0("Blank_subtracted_average/",Title1, "_vs_", Title2, ".csv")
# Save the new dataframe to a CSV file
write.csv(new_df, file_name2, row.names = FALSE)
# Sum by type for significant values
df_sig <- df %>%
filter(FDR < 0.1) %>%
group_by(type) %>%
summarise(sum_mean1 = sum(mean1),
sum_mean2 = sum(mean2), .groups = "keep")
df_all <- df %>%
group_by(type) %>%
summarise(sum_mean1 = sum(mean1),
sum_mean2 = sum(mean2), .groups = "keep")
# Combine the two dataframes to have a 'group' column and a 'value' column for plotting
df_sig_long <- df_sig %>%
select(type, sum_mean1, sum_mean2) %>%
gather(key = "group", value = "value", -type)
df_all_long <- df_all %>%
select(type, sum_mean1, sum_mean2) %>%
gather(key = "group", value = "value", -type)
# Plotting significant values
plot_sig <- df_sig_long %>%
group_by(type, group) %>%
# mutate(total_intensity = sum(summed_intensity)) %>%
# filter(FDR_40DP_vs_40GFP < 0.10 | FDR_40DP_vs_40DN < 0.10) %>% #filtering for lipids that are FDR<0.10 in DP vs GFP AND/OR DP vs DN
ungroup() %>%
select(group, type, value) %>%
unique() %>%
ggplot(aes(x=group, y = value, fill = type)) +
geom_col() +
theme_classic() +
ylab("Total lipid content ") +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class", guide = 'none') +
scale_x_discrete(labels = c(Title1, Title2)) + # This line has been added
labs(title = paste(Title1, "vs", Title2, " (All values)"), y = "Sum of Means")
# Plotting all values
plot_all <-df_all_long %>%
group_by(type, group) %>%
# mutate(total_intensity = sum(summed_intensity)) %>%
# filter(FDR_40DP_vs_40GFP < 0.10 | FDR_40DP_vs_40DN < 0.10) %>% #filtering for lipids that are FDR<0.10 in DP vs GFP AND/OR DP vs DN
ungroup() %>%
select(group, type, value) %>%
unique() %>%
ggplot(aes(x=group, y = value, fill = type)) +
geom_col() +
theme_classic() +
ylab("Total lipid content ") +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class", guide = 'none') +
scale_x_discrete(labels = c(Title1, Title2)) + # This line has been added
labs(title = paste(Title1, "vs", Title2, " (All values)"), y = "Sum of Means")
# Saving the plots
# ggsave(filename = paste0("Stacked_bars/", Title1, "_vs_", Title2, "_STACKED__with_BLANK_SUM_sig.svg"), plot = plot_sig)
ggsave(filename = paste0("Stacked_bars/", Title1, "_vs_", Title2, "_STACKED__with_BLANK_SUM_all.pdf"), plot = plot_all)
}
library(tidyverse)
library(tidyverse)
plot_combined_values_Stacked_with_blank_individual <- function(df, Title1, Title2) {
lipid_classes <- c("CAR", "CE", "Cer", "FA", "PC", "PE", "PG", "PI", "PS", "SM", "TAG",'DAG','TAG | DAG','DAG | CE','TAG | DAG | CE')
lipid_colors <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#808080", "#cab2d6", "#6a3d9a",'#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3')
lipid_colors_alpha <- alpha(lipid_colors, 0.5)
# Create a named vector to map lipid classes to their colors
lipid_class_colors <- setNames(lipid_colors_alpha, lipid_classes)
all_cols <- colnames(df)
start_idx <- which(all_cols == "type") + 1
cols1 <- all_cols[start_idx:(start_idx + as.numeric(df$Length1[1]) - 1)]
cols2 <- all_cols[(start_idx + as.numeric(df$Length1[1])):(start_idx + as.numeric(df$Length1[1]) + as.numeric(df$Length2[1]) - 1)]
blank_col <- all_cols[length(all_cols)]
df[cols1] <- pmax(df[cols1] - df[[blank_col]], 0)
df[cols2] <- pmax(df[cols2] - df[[blank_col]], 0)
all_cols_to_plot <- c(cols1, cols2)
df_long <- df %>%
pivot_longer(cols = all_of(all_cols_to_plot), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = all_cols_to_plot)) %>%  # Ensuring order
group_by(type, variable) %>%
summarise(sum_value = sum(value, na.rm = TRUE), .groups = "keep")
df_long_sig <- df %>%
filter(FDR < 0.1) %>%
pivot_longer(cols = all_of(all_cols_to_plot), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = all_cols_to_plot)) %>%  # Ensuring order
group_by(type, variable) %>%
summarise(sum_value = sum(value, na.rm = TRUE), .groups = "keep")
plot_all <- df_long %>%
ggplot(aes(x=variable, y=sum_value, fill=type)) +
geom_col() +
theme_classic() +
ylab("Total lipid content") +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = paste(Title1, "vs", Title2, " (All values)"), y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot_sig <- df_long_sig %>%
ggplot(aes(x=variable, y=sum_value, fill=type)) +
geom_col() +
theme_classic() +
ylab("Total lipid content") +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = paste(Title1, "vs", Title2, " (Significant values)"), y = "Sum of Values") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Saving the plots
ggsave(filename = paste0("Stacked_bars_individual/", Title1, "_vs_", Title2, "_STACKED__with_BLANK_all.pdf"), plot = plot_all)
# ggsave(filename = paste0("Stacked_bars_individual/", Title1, "_vs_", Title2, "_STACKED__with_BLANK_sig.svg"), plot = plot_sig)
}
dir_name <- "processed_results"
if (!dir.exists(dir_name)) {
dir.create(dir_name)
}
plot_pie_charts <- function(df, Title1, Title2, filename, filename_csv) {
library(gridExtra)
dir_name <- "processed_results2"
full_path <- file.path(dir_name, filename_csv)
lipid_classes <- c("CAR", "CE", "Cer", "FA", "PC", "PE", "PG", "PI", "PS", "SM", "TAG",'DAG','TAG | DAG','DAG | CE','TAG | DAG | CE')
lipid_colors <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#808080", "#cab2d6", "#6a3d9a",'#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3')
lipid_colors_alpha <- alpha(lipid_colors, 0.5)
# Create a named vector to map lipid classes to their colors
lipid_class_colors <- setNames(lipid_colors_alpha, lipid_classes)
# Extract column lengths
len1 <- as.numeric(df$Length1[1])
len2 <- as.numeric(df$Length2[1])
# Columns after 'type' are the ones of interest
all_cols <- colnames(df)
start_idx <- which(all_cols == "type") + 1
cols1 <- all_cols[start_idx:(start_idx + len1 - 1)]
cols2 <- all_cols[(start_idx + len1):(start_idx + len1 + len2 - 1)]
# Get the blank column (which is the penultimate column)
blank_col <- all_cols[length(all_cols)]
# Subtract the blank column from the columns of interest and set negative values to 0
df[cols1] <- pmax(df[cols1] - df[[blank_col]], 0)
df[cols2] <- pmax(df[cols2] - df[[blank_col]], 0)
df[cols1] <- apply(df[cols1], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
df[cols2] <- apply(df[cols2], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
write.csv(df, full_path, row.names = FALSE)
# Compute the means for the groups of columns
df <- df %>%
mutate(mean1 = rowMeans(select(., one_of(cols1))),
mean2 = rowMeans(select(., one_of(cols2))))
write.csv(df, file = filename_csv, row.names = FALSE)
# Sum by type for significant values
df_sig <- df %>%
#filter(FDR < 0.1) %>%
group_by(type) %>%
summarise(sum_mean1 = sum(mean1),
sum_mean2 = sum(mean2), .groups = "keep")
# write.csv(df_sig, file = filename_csv, row.names = FALSE)
# Make the pie charts
# pie1 <- df_sig %>%
#   ggplot(aes(x = "", y = sum_mean1, fill = type)) +
#   geom_bar(width = 1, stat = "identity", alpha = 0.5, color = "black") +
#   coord_polar("y", start=0) +
#   theme_void() +
#   theme(axis.text =element_blank(),
#         axis.line = element_blank()) +
#   scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
#   labs(title = Title1)
#
# pie2 <- df_sig %>%
#   ggplot(aes(x = "", y = sum_mean2, fill = type)) +
#   geom_bar(width = 1, stat = "identity", alpha = 0.5, color = "black") +
#   coord_polar("y", start=0) +
#   theme_void() +
#   theme(axis.text =element_blank(),
#         axis.line = element_blank()) +
#   scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
#   labs(title = Title2)
# Modify pie1
pie1 <- df_sig %>%
ggplot(aes(x = "", y = sum_mean1, fill = type)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void() +
theme(axis.text =element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = Title1)
pie2 <- df_sig %>%
ggplot(aes(x = "", y = sum_mean2, fill = type)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void() +
theme(axis.text =element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = Title2)
# Save the plots to an SVG file side by side
svg(filename, width=10, height=5)
grid.arrange(pie1, pie2, ncol=2)
dev.off()
return(list(pie1 = pie1, pie2 = pie2))
}
dir_name <- "processed_results2"
if (!dir.exists(dir_name)) {
dir.create(dir_name)
}
plot_pie_charts <- function(df, Title1, Title2, filename, filename_csv) {
library(gridExtra)
dir_name <- "processed_results2"
full_path <- file.path(dir_name, filename_csv)
lipid_classes <- c("CAR", "CE", "Cer", "FA", "PC", "PE", "PG", "PI", "PS", "SM", "TAG",'DAG','TAG | DAG','DAG | CE','TAG | DAG | CE')
lipid_colors <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#808080", "#cab2d6", "#6a3d9a",'#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3')
lipid_colors_alpha <- alpha(lipid_colors, 0.5)
# Create a named vector to map lipid classes to their colors
lipid_class_colors <- setNames(lipid_colors_alpha, lipid_classes)
# Extract column lengths
len1 <- as.numeric(df$Length1[1])
len2 <- as.numeric(df$Length2[1])
# Columns after 'type' are the ones of interest
all_cols <- colnames(df)
start_idx <- which(all_cols == "type") + 1
cols1 <- all_cols[start_idx:(start_idx + len1 - 1)]
cols2 <- all_cols[(start_idx + len1):(start_idx + len1 + len2 - 1)]
# Get the blank column (which is the penultimate column)
blank_col <- all_cols[length(all_cols)]
# Subtract the blank column from the columns of interest and set negative values to 0
df[cols1] <- pmax(df[cols1] - df[[blank_col]], 0)
df[cols2] <- pmax(df[cols2] - df[[blank_col]], 0)
df[cols1] <- apply(df[cols1], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
df[cols2] <- apply(df[cols2], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
write.csv(df, full_path, row.names = FALSE)
# Compute the means for the groups of columns
df <- df %>%
mutate(mean1 = rowMeans(select(., one_of(cols1))),
mean2 = rowMeans(select(., one_of(cols2))))
write.csv(df, file = filename_csv, row.names = FALSE)
# Sum by type for significant values
df_sig <- df %>%
#filter(FDR < 0.1) %>%
group_by(type) %>%
summarise(sum_mean1 = sum(mean1),
sum_mean2 = sum(mean2), .groups = "keep")
# write.csv(df_sig, file = filename_csv, row.names = FALSE)
# Make the pie charts
# pie1 <- df_sig %>%
#   ggplot(aes(x = "", y = sum_mean1, fill = type)) +
#   geom_bar(width = 1, stat = "identity", alpha = 0.5, color = "black") +
#   coord_polar("y", start=0) +
#   theme_void() +
#   theme(axis.text =element_blank(),
#         axis.line = element_blank()) +
#   scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
#   labs(title = Title1)
#
# pie2 <- df_sig %>%
#   ggplot(aes(x = "", y = sum_mean2, fill = type)) +
#   geom_bar(width = 1, stat = "identity", alpha = 0.5, color = "black") +
#   coord_polar("y", start=0) +
#   theme_void() +
#   theme(axis.text =element_blank(),
#         axis.line = element_blank()) +
#   scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
#   labs(title = Title2)
# Modify pie1
pie1 <- df_sig %>%
ggplot(aes(x = "", y = sum_mean1, fill = type)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void() +
theme(axis.text =element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = Title1)
pie2 <- df_sig %>%
ggplot(aes(x = "", y = sum_mean2, fill = type)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void() +
theme(axis.text =element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = Title2)
# Save the plots to an SVG file side by side
svg(filename, width=10, height=5)
grid.arrange(pie1, pie2, ncol=2)
dev.off()
return(list(pie1 = pie1, pie2 = pie2))
}
for (jj in file_list){
excel_file <- read_csv(paste0("results/",jj,sep=""))
dir.create("plots", F)
jj
if (!grepl("full", jj, ignore.case = TRUE)) {
next
}
# title_for_plot <- gsub(":", "_",excel_file$Title[1])
Title1 <- gsub("[:| ]", "_", excel_file$Title_1[1])
Title2 <- gsub("[:| ]", "_", excel_file$Title_2[1])
Title1 <- gsub("__", "_", Title1)
Title2 <- gsub("__", "_", Title2)
# Title1 <-
if (!dir.exists("Stacked_bars")) {
dir.create("Stacked_bars")
}
title_for_plot <- paste0(Title1,Title2,sep="_")
# plot_combined_values_Stacked(excel_file, Title1, Title2)
# plot_combined_values_Stacked_with_blank(excel_file, Title1, Title2)
plot_combined_values_Stacked_with_blank_individual(excel_file, Title1, Title2)
plot_pie_charts(excel_file, Title1, Title2, paste0("Pie_charts/",Title1,Title2,".svg",sep=""), paste0("Pie_charts/",Title1,Title2,".csv",sep=""))
# Plotting and saving
# plot_object <- plot_significant_lipids(excel_file, title_for_plot)
# process_and_plot(excel_file, Title1, Title2)
# Ensuring the plots directory exists
}
for (jj in file_list){
excel_file <- read_csv(paste0("results/",jj,sep=""))
dir.create("plots", F)
jj
if (!grepl("full", jj, ignore.case = TRUE)) {
next
}
# title_for_plot <- gsub(":", "_",excel_file$Title[1])
Title1 <- gsub("[:| ]", "_", excel_file$Title_1[1])
Title2 <- gsub("[:| ]", "_", excel_file$Title_2[1])
Title1 <- gsub("__", "_", Title1)
Title2 <- gsub("__", "_", Title2)
# Title1 <-
if (!dir.exists("Stacked_bars")) {
dir.create("Stacked_bars")
}
title_for_plot <- paste0(Title1,Title2,sep="_")
# plot_combined_values_Stacked(excel_file, Title1, Title2)
# plot_combined_values_Stacked_with_blank(excel_file, Title1, Title2)
plot_combined_values_Stacked_with_blank_individual(excel_file, Title1, Title2)
plot_pie_charts(excel_file, Title1, Title2, paste0("Pie_charts/",Title1,Title2,".svg",sep=""), paste0("Pie_charts/",Title1,Title2,".csv",sep=""))
# Plotting and saving
# plot_object <- plot_significant_lipids(excel_file, title_for_plot)
# process_and_plot(excel_file, Title1, Title2)
# Ensuring the plots directory exists
}
plot_pie_charts <- function(df, Title1, Title2, filename, filename_csv) {
library(gridExtra)
dir_name <- "processed_results2"
full_path <- file.path(dir_name, filename_csv)
lipid_classes <- c("CAR", "CE", "Cer", "FA", "PC", "PE", "PG", "PI", "PS", "SM", "TAG",'DAG','TAG | DAG','DAG | CE','TAG | DAG | CE')
lipid_colors <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#808080", "#cab2d6", "#6a3d9a",'#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3')
lipid_colors_alpha <- alpha(lipid_colors, 0.5)
# Create a named vector to map lipid classes to their colors
lipid_class_colors <- setNames(lipid_colors_alpha, lipid_classes)
# Extract column lengths
len1 <- as.numeric(df$Length1[1])
len2 <- as.numeric(df$Length2[1])
# Columns after 'type' are the ones of interest
all_cols <- colnames(df)
start_idx <- which(all_cols == "type") + 1
cols1 <- all_cols[start_idx:(start_idx + len1 - 1)]
cols2 <- all_cols[(start_idx + len1):(start_idx + len1 + len2 - 1)]
# Get the blank column (which is the penultimate column)
blank_col <- all_cols[length(all_cols)]
# Subtract the blank column from the columns of interest and set negative values to 0
df[cols1] <- pmax(df[cols1] - df[[blank_col]], 0)
df[cols2] <- pmax(df[cols2] - df[[blank_col]], 0)
df[cols1] <- apply(df[cols1], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
df[cols2] <- apply(df[cols2], 2, function(x) ifelse(!is.na(as.numeric(as.character(x))), x, 0))
write.csv(df, full_path, row.names = FALSE)
# Compute the means for the groups of columns
df <- df %>%
mutate(mean1 = rowMeans(select(., one_of(cols1))),
mean2 = rowMeans(select(., one_of(cols2))))
# write.csv(df, file = filename_csv, row.names = FALSE)
write.csv(df, full_path, row.names = FALSE)
# Sum by type for significant values
df_sig <- df %>%
#filter(FDR < 0.1) %>%
group_by(type) %>%
summarise(sum_mean1 = sum(mean1),
sum_mean2 = sum(mean2), .groups = "keep")
# write.csv(df_sig, file = filename_csv, row.names = FALSE)
# Make the pie charts
# pie1 <- df_sig %>%
#   ggplot(aes(x = "", y = sum_mean1, fill = type)) +
#   geom_bar(width = 1, stat = "identity", alpha = 0.5, color = "black") +
#   coord_polar("y", start=0) +
#   theme_void() +
#   theme(axis.text =element_blank(),
#         axis.line = element_blank()) +
#   scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
#   labs(title = Title1)
#
# pie2 <- df_sig %>%
#   ggplot(aes(x = "", y = sum_mean2, fill = type)) +
#   geom_bar(width = 1, stat = "identity", alpha = 0.5, color = "black") +
#   coord_polar("y", start=0) +
#   theme_void() +
#   theme(axis.text =element_blank(),
#         axis.line = element_blank()) +
#   scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
#   labs(title = Title2)
# Modify pie1
pie1 <- df_sig %>%
ggplot(aes(x = "", y = sum_mean1, fill = type)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void() +
theme(axis.text =element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = Title1)
pie2 <- df_sig %>%
ggplot(aes(x = "", y = sum_mean2, fill = type)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
theme_void() +
theme(axis.text =element_blank(),
axis.line = element_blank()) +
scale_fill_manual(values = lipid_class_colors, name = "Lipid class") +
labs(title = Title2)
# Save the plots to an SVG file side by side
svg(filename, width=10, height=5)
grid.arrange(pie1, pie2, ncol=2)
dev.off()
return(list(pie1 = pie1, pie2 = pie2))
}
for (jj in file_list){
excel_file <- read_csv(paste0("results/",jj,sep=""))
dir.create("plots", F)
jj
if (!grepl("full", jj, ignore.case = TRUE)) {
next
}
# title_for_plot <- gsub(":", "_",excel_file$Title[1])
Title1 <- gsub("[:| ]", "_", excel_file$Title_1[1])
Title2 <- gsub("[:| ]", "_", excel_file$Title_2[1])
Title1 <- gsub("__", "_", Title1)
Title2 <- gsub("__", "_", Title2)
# Title1 <-
if (!dir.exists("Stacked_bars")) {
dir.create("Stacked_bars")
}
title_for_plot <- paste0(Title1,Title2,sep="_")
# plot_combined_values_Stacked(excel_file, Title1, Title2)
# plot_combined_values_Stacked_with_blank(excel_file, Title1, Title2)
plot_combined_values_Stacked_with_blank_individual(excel_file, Title1, Title2)
plot_pie_charts(excel_file, Title1, Title2, paste0("Pie_charts/",Title1,Title2,".svg",sep=""), paste0("Pie_charts/",Title1,Title2,".csv",sep=""))
# Plotting and saving
# plot_object <- plot_significant_lipids(excel_file, title_for_plot)
# process_and_plot(excel_file, Title1, Title2)
# Ensuring the plots directory exists
}
for (jj in file_list){
excel_file <- read_csv(paste0("results/",jj,sep=""))
dir.create("plots", F)
jj
if (!grepl("full", jj, ignore.case = TRUE)) {
next
}
# title_for_plot <- gsub(":", "_",excel_file$Title[1])
Title1 <- gsub("[:| ]", "_", excel_file$Title_1[1])
Title2 <- gsub("[:| ]", "_", excel_file$Title_2[1])
Title1 <- gsub("__", "_", Title1)
Title2 <- gsub("__", "_", Title2)
# Title1 <-
if (!dir.exists("Stacked_bars")) {
dir.create("Stacked_bars")
}
title_for_plot <- paste0(Title1,Title2,sep="_")
# plot_combined_values_Stacked(excel_file, Title1, Title2)
# plot_combined_values_Stacked_with_blank(excel_file, Title1, Title2)
plot_combined_values_Stacked_with_blank_individual(excel_file, Title1, Title2)
plot_pie_charts(excel_file, Title1, Title2, paste0("Pie_charts/",Title1,Title2,".svg",sep=""), paste0("Pie_charts/",Title1,Title2,".csv",sep=""))
# Plotting and saving
# plot_object <- plot_significant_lipids(excel_file, title_for_plot)
# process_and_plot(excel_file, Title1, Title2)
# Ensuring the plots directory exists
}
